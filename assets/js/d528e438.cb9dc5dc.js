"use strict";(self.webpackChunkgpu_passthru_info=self.webpackChunkgpu_passthru_info||[]).push([[822],{888:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>u,frontMatter:()=>r,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"dual-gpu-passthru-desktop/Passthrough-GPU","title":"Passthrough the GPU!","description":"Explore IOMMU Grouping","source":"@site/docs/dual-gpu-passthru-desktop/Passthrough-GPU.mdx","sourceDirName":"dual-gpu-passthru-desktop","slug":"/dual-gpu-passthru-desktop/Passthrough-GPU","permalink":"/docs/dual-gpu-passthru-desktop/Passthrough-GPU","draft":false,"unlisted":false,"editUrl":"https://github.com/UmmItC/passthru/tree/master/docs/dual-gpu-passthru-desktop/Passthrough-GPU.mdx","tags":[],"version":"current","lastUpdatedBy":"UmmIt","lastUpdatedAt":1751548013000,"sidebarPosition":8,"frontMatter":{"sidebar_position":8},"sidebar":"tutorialSidebar","previous":{"title":"Edit Bootloader Configuration","permalink":"/docs/dual-gpu-passthru-desktop/Bootloader-enable-distro"},"next":{"title":"Installing Required Packages","permalink":"/docs/dual-gpu-passthru-desktop/Install-require-packages"}}');var t=n(4848),s=n(8453);const r={sidebar_position:8},a="Passthrough the GPU!",d={},l=[{value:"Explore IOMMU Grouping",id:"explore-iommu-grouping",level:2},{value:"Identify IOMMU GPU IDs",id:"identify-iommu-gpu-ids",level:2},{value:"Example IDs",id:"example-ids",level:3},{value:"Embed IDs in Your Bootloader Config",id:"embed-ids-in-your-bootloader-config",level:2},{value:"Systemd-boot Example",id:"systemd-boot-example",level:3},{value:"GRUB Example",id:"grub-example",level:3},{value:"Create a <code>vfio.conf</code> File",id:"create-a-vfioconf-file",level:2},{value:"Update <code>mkinitcpio.conf</code>",id:"update-mkinitcpioconf",level:2},{value:"Regenerate the Image",id:"regenerate-the-image",level:2},{value:"Verify GPU Passthrough Status",id:"verify-gpu-passthrough-status",level:2}];function c(e){const i={admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.header,{children:(0,t.jsx)(i.h1,{id:"passthrough-the-gpu",children:"Passthrough the GPU!"})}),"\n",(0,t.jsx)(i.h2,{id:"explore-iommu-grouping",children:"Explore IOMMU Grouping"}),"\n",(0,t.jsx)(i.p,{children:"Let's passthrough our second GPU now. Run the following command in your terminal:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",metastring:'title="Script for listing IOMMU Groups"',children:'#!/bin/bash\nshopt -s nullglob\nfor g in $(find /sys/kernel/iommu_groups/* -maxdepth 0 -type d | sort -V); do\n    echo "IOMMU Group ${g##*/}:"\n    for d in $g/devices/*; do\n        echo -e "\\t$(lspci -nns ${d##*/})"\n    done;\ndone;\n'})}),"\n",(0,t.jsx)(i.admonition,{type:"info",children:(0,t.jsx)(i.p,{children:"This script should output information about your PCI device. If it does not, it may be because you haven't enabled the necessary settings in your BIOS."})}),"\n",(0,t.jsx)(i.p,{children:"This script provides a detailed view of IOMMU groups and their associated devices, helping you understand the connections within your system. This information is vital for configuring device passthrough in virtualization."}),"\n",(0,t.jsx)(i.h2,{id:"identify-iommu-gpu-ids",children:"Identify IOMMU GPU IDs"}),"\n",(0,t.jsxs)(i.p,{children:["The output from the above command will list your GPUs. Your second GPU, the one designated for passthrough, will be included in this list. Note its PCI (Peripheral Component Interconnect) numbers, also known as ",(0,t.jsx)(i.strong,{children:"PCI IDs"}),". These IDs are critical for the upcoming steps."]}),"\n",(0,t.jsx)(i.p,{children:"Here's an example of what you might see:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-txt",children:"IOMMU Group 22:\n\t09:00.0 VGA compatible controller [0300]: Advanced Micro Devices, Inc. [AMD/ATI] Navi 23 [Radeon RX 6600/6600 XT/6600M] [1002:73ff] (rev c7)\nIOMMU Group 23:\n\t09:00.1 Audio device [0403]: Advanced Micro Devices, Inc. [AMD/ATI] Navi 21/23 HDMI/DP Audio Controller [1002:ab28]\n"})}),"\n",(0,t.jsx)(i.h3,{id:"example-ids",children:"Example IDs"}),"\n",(0,t.jsx)(i.p,{children:"Suppose your investigation reveals the following GPU IDs:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"1002:73ff (GPU)"}),"\n",(0,t.jsxs)(i.li,{children:["1002",":ab28"," (GPU Audio)"]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Keep these IDs handy, as they are crucial for the next steps."}),"\n",(0,t.jsx)(i.h2,{id:"embed-ids-in-your-bootloader-config",children:"Embed IDs in Your Bootloader Config"}),"\n",(0,t.jsx)(i.p,{children:"Configuring GPU passthrough involves specifying which GPU to allocate to the virtual machine by using its PCI IDs. These IDs pinpoint the GPU within the system, enabling direct hardware access."}),"\n",(0,t.jsx)(i.p,{children:"Add the PCI IDs to your bootloader configuration. If you're using GRUB or another bootloader, include the following in the configuration line where you enabled virtualization:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-txt",metastring:'{1} title="PCI IDs to Add"',children:"vfio-pci.ids=1002:73ff,1002:ab28\n"})}),"\n",(0,t.jsx)(i.h3,{id:"systemd-boot-example",children:"Systemd-boot Example"}),"\n",(0,t.jsx)(i.p,{children:"Your updated configuration with systemd-boot should look like this:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-txt",metastring:'{4} title="systemd-boot configuration"',children:"title Arch Linux\nlinux /vmlinuz-linux\ninitrd /initramfs-linux.img\noptions root=<root> quiet rw intel_iommu=on iommu=pt vfio-pci.ids=1002:73ff,1002:ab28\n"})}),"\n",(0,t.jsx)(i.admonition,{type:"tip",children:(0,t.jsx)(i.p,{children:"For systemd-boot users, you do not need to regenerate the config."})}),"\n",(0,t.jsx)(i.h3,{id:"grub-example",children:"GRUB Example"}),"\n",(0,t.jsx)(i.p,{children:"Your updated configuration with GRUB should look like this:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-txt",metastring:'{1} title="GRUB configuration"',children:'GRUB_CMDLINE_LINUX_DEFAULT="intel_iommu=on iommu=pt vfio-pci.ids=1002:73ff,1002:ab28 ..."\n'})}),"\n",(0,t.jsx)(i.p,{children:"For GRUB users, you will need to regenerate the config file:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",metastring:'title="Regenerate GRUB config"',children:"sudo grub-mkconfig -o /boot/grub/grub.cfg\n"})}),"\n",(0,t.jsxs)(i.h2,{id:"create-a-vfioconf-file",children:["Create a ",(0,t.jsx)(i.code,{children:"vfio.conf"})," File"]}),"\n",(0,t.jsxs)(i.p,{children:["Next, create a new configuration file for ",(0,t.jsx)(i.code,{children:"vfio"}),":"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",metastring:'title="Create vfio.conf"',children:"sudo touch /etc/modprobe.d/vfio.conf\n"})}),"\n",(0,t.jsx)(i.p,{children:"Add the following content:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-txt",metastring:'{1} title="vfio.conf content"',children:"options vfio-pci ids=1002:73ff,1002:ab28\n"})}),"\n",(0,t.jsxs)(i.h2,{id:"update-mkinitcpioconf",children:["Update ",(0,t.jsx)(i.code,{children:"mkinitcpio.conf"})]}),"\n",(0,t.jsxs)(i.p,{children:["Ensure that the necessary ",(0,t.jsx)(i.code,{children:"vfio"})," modules are included in your initial RAM disk. Edit the ",(0,t.jsx)(i.code,{children:"/etc/mkinitcpio.conf"})," file and update the ",(0,t.jsx)(i.code,{children:"MODULES()"})," line:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-txt",metastring:'{1} title="mkinitcpio.conf modules line"',children:"MODULES=(vfio_pci vfio vfio_iommu_type1)\n"})}),"\n",(0,t.jsx)(i.h2,{id:"regenerate-the-image",children:"Regenerate the Image"}),"\n",(0,t.jsx)(i.p,{children:"With the configuration updated, rebuild the initial RAM disk and reboot your system:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",metastring:'title="Regenerate initramfs"',children:"sudo mkinitcpio -P # Regenerate all image\nsudo mkinitcpio -p linux # Regenerate image only linux\n"})}),"\n",(0,t.jsx)(i.h2,{id:"verify-gpu-passthrough-status",children:"Verify GPU Passthrough Status"}),"\n",(0,t.jsx)(i.p,{children:"Now reboot your system and check the status of your GPU. To check if your GPU is correctly configured for passthrough, run:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-bash",metastring:'title="Check PCI devices"',children:"lspci -k\n"})}),"\n",(0,t.jsxs)(i.p,{children:["Look at your PCI setup. The ",(0,t.jsx)(i.code,{children:"Kernel driver in use"})," entry should show ",(0,t.jsx)(i.code,{children:"vfio-pci"}),". For example:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-txt",metastring:'{3,7} title="Success Example"',children:"09:00.0 VGA compatible controller: Advanced Micro Devices, Inc. [AMD/ATI] Navi 23 [Radeon RX 6600/6600 XT/6600M] (rev c7)\n\tSubsystem: Tul Corporation / PowerColor Navi 23 [Radeon RX 6600/6600 XT/6600M]\n\tKernel driver in use: vfio-pci\n\tKernel modules: amdgpu\n09:00.1 Audio device: Advanced Micro Devices, Inc. [AMD/ATI] Navi 21/23 HDMI/DP Audio Controller\n\tSubsystem: Advanced Micro Devices, Inc. [AMD/ATI] Navi 21/23 HDMI/DP Audio Controller\n\tKernel driver in use: vfio-pci\n\tKernel modules: snd_hda_intel\n"})}),"\n",(0,t.jsx)(i.admonition,{type:"success",children:(0,t.jsxs)(i.p,{children:["If you see ",(0,t.jsx)(i.code,{children:"vfio-pci"}),", your GPU and GPU Audio are successfully set up for passthrough. If not, review your steps and try again. Success is within reach!"]})})]})}function u(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>a});var o=n(6540);const t={},s=o.createContext(t);function r(e){const i=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function a(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),o.createElement(s.Provider,{value:i},e.children)}}}]);